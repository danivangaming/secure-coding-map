import * as tg from "generic-type-guard";
import type { ButtonClickedEvent } from "./ButtonClickedEvent";
import type { ChatEvent } from "./ChatEvent";
import type { ClosePopupEvent } from "./ClosePopupEvent";
import type { EnterLeaveEvent } from "./EnterLeaveEvent";
import type { GoToPageEvent } from "./GoToPageEvent";
import type { LoadPageEvent } from "./LoadPageEvent";
import type { OpenPopupEvent } from "./OpenPopupEvent";
import type { OpenTabEvent } from "./OpenTabEvent";
import type { UserInputChatEvent } from "./UserInputChatEvent";
import type { LayerEvent } from "./LayerEvent";
import type { SetPropertyEvent } from "./setPropertyEvent";
import type { LoadSoundEvent } from "./LoadSoundEvent";
import type { PlaySoundEvent } from "./PlaySoundEvent";
import type { MenuItemClickedEvent } from "./ui/MenuItemClickedEvent";
import type { HasPlayerMovedEvent } from "./HasPlayerMovedEvent";
import type { SetTilesEvent } from "./SetTilesEvent";
import type { SetVariableEvent } from "./SetVariableEvent";
import type { EmbeddedWebsite } from "../iframe/Room/EmbeddedWebsite";
import type { LoadTilesetEvent } from "./LoadTilesetEvent";
import type { MessageReferenceEvent } from "./ui/TriggerActionMessageEvent";
import type { MenuRegisterEvent, UnregisterMenuEvent } from "./ui/MenuRegisterEvent";
import type { ChangeLayerEvent } from "./ChangeLayerEvent";
import type { WasCameraUpdatedEvent } from "./WasCameraUpdatedEvent";
import type { ChangeZoneEvent } from "./ChangeZoneEvent";
import type { CameraSetEvent } from "./CameraSetEvent";
import type { CameraFollowPlayerEvent } from "./CameraFollowPlayerEvent";
import type { RemotePlayerClickedEvent } from "./RemotePlayerClickedEvent";
import type { AddActionsMenuKeyToRemotePlayerEvent } from "./AddActionsMenuKeyToRemotePlayerEvent";
import type { ActionsMenuActionClickedEvent } from "./ActionsMenuActionClickedEvent";
import type { RemoveActionsMenuKeyFromRemotePlayerEvent } from "./RemoveActionsMenuKeyFromRemotePlayerEvent";
export interface TypedMessageEvent<T> extends MessageEvent {
    data: T;
}
/**
 * List event types sent from an iFrame to WorkAdventure
 */
export declare type IframeEventMap = {
    addActionsMenuKeyToRemotePlayer: AddActionsMenuKeyToRemotePlayerEvent;
    removeActionsMenuKeyFromRemotePlayer: RemoveActionsMenuKeyFromRemotePlayerEvent;
    loadPage: LoadPageEvent;
    chat: ChatEvent;
    cameraFollowPlayer: CameraFollowPlayerEvent;
    cameraSet: CameraSetEvent;
    openPopup: OpenPopupEvent;
    closePopup: ClosePopupEvent;
    openTab: OpenTabEvent;
    goToPage: GoToPageEvent;
    disablePlayerControls: null;
    restorePlayerControls: null;
    displayBubble: null;
    removeBubble: null;
    onPlayerMove: undefined;
    onOpenActionMenu: undefined;
    onCameraUpdate: undefined;
    showLayer: LayerEvent;
    hideLayer: LayerEvent;
    setProperty: SetPropertyEvent;
    loadSound: LoadSoundEvent;
    playSound: PlaySoundEvent;
    stopSound: null;
    getState: undefined;
    loadTileset: LoadTilesetEvent;
    registerMenu: MenuRegisterEvent;
    unregisterMenu: UnregisterMenuEvent;
    setTiles: SetTilesEvent;
    modifyEmbeddedWebsite: Partial<EmbeddedWebsite>;
};
export interface IframeEvent<T extends keyof IframeEventMap> {
    type: T;
    data: IframeEventMap[T];
}
export declare const isIframeEventWrapper: (event: any) => event is IframeEvent<keyof IframeEventMap>;
export interface IframeResponseEventMap {
    userInputChat: UserInputChatEvent;
    enterEvent: EnterLeaveEvent;
    leaveEvent: EnterLeaveEvent;
    enterLayerEvent: ChangeLayerEvent;
    leaveLayerEvent: ChangeLayerEvent;
    enterZoneEvent: ChangeZoneEvent;
    leaveZoneEvent: ChangeZoneEvent;
    buttonClickedEvent: ButtonClickedEvent;
    remotePlayerClickedEvent: RemotePlayerClickedEvent;
    actionsMenuActionClickedEvent: ActionsMenuActionClickedEvent;
    hasPlayerMoved: HasPlayerMovedEvent;
    wasCameraUpdated: WasCameraUpdatedEvent;
    menuItemClicked: MenuItemClickedEvent;
    setVariable: SetVariableEvent;
    messageTriggered: MessageReferenceEvent;
}
export interface IframeResponseEvent<T extends keyof IframeResponseEventMap> {
    type: T;
    data: IframeResponseEventMap[T];
}
export declare const isIframeResponseEventWrapper: (event: {
    type?: string;
}) => event is IframeResponseEvent<keyof IframeResponseEventMap>;
/**
 * List event types sent from an iFrame to WorkAdventure that expect a unique answer from WorkAdventure along the type for the answer from WorkAdventure to the iFrame.
 * Types are defined using Type guards that will actually bused to enforce and check types.
 */
export declare const iframeQueryMapTypeGuards: {
    getState: {
        query: tg.TypeGuard<undefined>;
        answer: tg.TypeGuard<object & {
            roomId: string;
            mapUrl: string;
            nickname: string;
            language: string | undefined;
            uuid: string | undefined;
            startLayerName: string | null;
            tags: string[];
            variables: object;
            playerVariables: object;
            userRoomToken: string | undefined;
        }>;
    };
    getMapData: {
        query: tg.TypeGuard<undefined>;
        answer: tg.TypeGuard<object & {
            data: object;
        }>;
    };
    setVariable: {
        query: tg.TypeGuard<object & {
            key: string;
            value: unknown;
            target: "global" | "player";
        }>;
        answer: tg.TypeGuard<undefined>;
    };
    loadTileset: {
        query: tg.TypeGuard<object & {
            url: string;
        }>;
        answer: tg.TypeGuard<number>;
    };
    openCoWebsite: {
        query: tg.TypeGuard<object & {
            url: string;
            allowApi: boolean | undefined;
            allowPolicy: string | undefined;
            widthPercent: number | undefined;
            position: number | undefined;
            closable: boolean | undefined;
            lazy: boolean | undefined;
        }>;
        answer: tg.TypeGuard<object & {
            id: string;
        }>;
    };
    getCoWebsites: {
        query: tg.TypeGuard<undefined>;
        answer: tg.TypeGuard<(object & {
            id: string;
        })[]>;
    };
    closeCoWebsite: {
        query: tg.TypeGuard<string>;
        answer: tg.TypeGuard<undefined>;
    };
    closeCoWebsites: {
        query: tg.TypeGuard<undefined>;
        answer: tg.TypeGuard<undefined>;
    };
    triggerActionMessage: {
        query: tg.TypeGuard<object & {
            message: string;
            uuid: string;
            type: "message" | "warning";
        }>;
        answer: tg.TypeGuard<undefined>;
    };
    removeActionMessage: {
        query: tg.TypeGuard<object & {
            uuid: string;
        }>;
        answer: tg.TypeGuard<undefined>;
    };
    getEmbeddedWebsite: {
        query: tg.TypeGuard<string>;
        answer: tg.TypeGuard<object & {
            name: string;
            url: string;
            position: object & {
                x: number;
                y: number;
                width: number;
                height: number;
            };
        } & Partial<{
            visible: boolean;
            allowApi: boolean;
            allow: string;
            origin: "player" | "map";
            scale: number;
        }>>;
    };
    deleteEmbeddedWebsite: {
        query: tg.TypeGuard<string>;
        answer: tg.TypeGuard<undefined>;
    };
    createEmbeddedWebsite: {
        query: tg.TypeGuard<object & {
            name: string;
            url: string;
            position: object & {
                x: number;
                y: number;
                width: number;
                height: number;
            };
        } & Partial<{
            visible: boolean;
            allowApi: boolean;
            allow: string;
            origin: "player" | "map";
            scale: number;
        }>>;
        answer: tg.TypeGuard<undefined>;
    };
    setPlayerOutline: {
        query: tg.TypeGuard<object & {
            red: number;
            green: number;
            blue: number;
        }>;
        answer: tg.TypeGuard<undefined>;
    };
    removePlayerOutline: {
        query: tg.TypeGuard<undefined>;
        answer: tg.TypeGuard<undefined>;
    };
    getPlayerPosition: {
        query: tg.TypeGuard<undefined>;
        answer: tg.TypeGuard<object & {
            x: number;
            y: number;
        }>;
    };
    movePlayerTo: {
        query: tg.TypeGuard<object & {
            x: number;
            y: number;
            speed: number | undefined;
        }>;
        answer: tg.TypeGuard<object & {
            x: number;
            y: number;
            cancelled: boolean;
        }>;
    };
};
declare type GuardedType<T> = T extends (x: unknown) => x is infer T ? T : never;
declare type IframeQueryMapTypeGuardsType = typeof iframeQueryMapTypeGuards;
declare type UnknownToVoid<T> = undefined extends T ? void : T;
export declare type IframeQueryMap = {
    [key in keyof IframeQueryMapTypeGuardsType]: {
        query: GuardedType<IframeQueryMapTypeGuardsType[key]["query"]>;
        answer: UnknownToVoid<GuardedType<IframeQueryMapTypeGuardsType[key]["answer"]>>;
    };
};
export interface IframeQuery<T extends keyof IframeQueryMap> {
    type: T;
    data: IframeQueryMap[T]["query"];
}
export interface IframeQueryWrapper<T extends keyof IframeQueryMap> {
    id: number;
    query: IframeQuery<T>;
}
export declare const isIframeQueryKey: (type: string) => type is "setVariable" | "getState" | "loadTileset" | "getMapData" | "openCoWebsite" | "getCoWebsites" | "closeCoWebsite" | "closeCoWebsites" | "triggerActionMessage" | "removeActionMessage" | "getEmbeddedWebsite" | "deleteEmbeddedWebsite" | "createEmbeddedWebsite" | "setPlayerOutline" | "removePlayerOutline" | "getPlayerPosition" | "movePlayerTo";
export declare const isIframeQuery: (event: any) => event is IframeQuery<"setVariable" | "getState" | "loadTileset" | "getMapData" | "openCoWebsite" | "getCoWebsites" | "closeCoWebsite" | "closeCoWebsites" | "triggerActionMessage" | "removeActionMessage" | "getEmbeddedWebsite" | "deleteEmbeddedWebsite" | "createEmbeddedWebsite" | "setPlayerOutline" | "removePlayerOutline" | "getPlayerPosition" | "movePlayerTo">;
export declare const isIframeQueryWrapper: (event: any) => event is IframeQueryWrapper<"setVariable" | "getState" | "loadTileset" | "getMapData" | "openCoWebsite" | "getCoWebsites" | "closeCoWebsite" | "closeCoWebsites" | "triggerActionMessage" | "removeActionMessage" | "getEmbeddedWebsite" | "deleteEmbeddedWebsite" | "createEmbeddedWebsite" | "setPlayerOutline" | "removePlayerOutline" | "getPlayerPosition" | "movePlayerTo">;
export interface IframeAnswerEvent<T extends keyof IframeQueryMap> {
    id: number;
    type: T;
    data: IframeQueryMap[T]["answer"];
}
export declare const isIframeAnswerEvent: (event: {
    type?: string;
    id?: number;
}) => event is IframeAnswerEvent<"setVariable" | "getState" | "loadTileset" | "getMapData" | "openCoWebsite" | "getCoWebsites" | "closeCoWebsite" | "closeCoWebsites" | "triggerActionMessage" | "removeActionMessage" | "getEmbeddedWebsite" | "deleteEmbeddedWebsite" | "createEmbeddedWebsite" | "setPlayerOutline" | "removePlayerOutline" | "getPlayerPosition" | "movePlayerTo">;
export interface IframeErrorAnswerEvent {
    id: number;
    type: keyof IframeQueryMap;
    error: string;
}
export declare const isIframeErrorAnswerEvent: (event: {
    type?: string;
    id?: number;
    error?: string;
}) => event is IframeErrorAnswerEvent;
export {};
